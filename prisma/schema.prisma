// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
  
generator client {
  provider = "prisma-client-js" 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActivityStatus {
  ACTIVE
  INACTIVE
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum ContactAttributeType {
  TEXT
  NUMBER
}

// Unified User Model
model User {
  id          String    @id @default(cuid())
  name        String
  email       String    @unique
  password    String
  phone       String?
  size        String?
  industry    String?

  whatsAppAccount WhatsAppAccount? @relation("UserWhatsAppAccount", fields: [whatsAppAccountId], references: [id])
  whatsAppAccountId String? @unique

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([email])
}

// Store WhatsApp Business API credentials per user
model WhatsAppAccount {
  id              String                @id @default(cuid())
  wabaid          String // WhatsApp Business Account ID
  accessToken     String // Encrypted access token

  displayName     String
  verified        Boolean               @default(false)
  status          String                @default("ACTIVE") // ACTIVE, SUSPENDED, DELETED

  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  user            User?                 @relation("UserWhatsAppAccount")

  campaigns       WhatsAppCampaign[]
  phoneNumbers    WhatsAppPhoneNumber[]
  labels          Label[]
  attributes      ContactAttribute[]
}

model WhatsAppPhoneNumber {
  id                     String  @id @default(cuid())
  phoneNumberId          String
  phoneNumber            String
  name                   String?
  codeVerificationStatus String?

  isRegistered Boolean @default(false)
  isSubscribed Boolean @default(false)

  accountId String
  account   WhatsAppAccount @relation(fields: [accountId], references: [id])

  recipients WhatsAppRecipient[]
  messages   WhatsAppMessage[]
  automations WhatsAppAutomation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Store individual recipients
model WhatsAppRecipient {
  id          String            @id @default(cuid())
  phoneNumber String
  name        String?

  whatsAppPhoneNumberId String?
  whatsAppPhoneNumber   WhatsAppPhoneNumber? @relation(fields: [whatsAppPhoneNumberId], references: [id])

  hasConversation Boolean @default(false)

  lastCheckedTime DateTime @default(now())

  isOptedOut Boolean @default(false)

  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  messages  WhatsAppMessage[]
  labels    Label[]

  attributeValues Json[]

  @@unique([whatsAppPhoneNumberId, phoneNumber])
}

// Store campaign data
model WhatsAppCampaign {
  id             String           @id @default(cuid())
  name           String
  type           String // TEXT, IMAGE, TEMPLATE
  message        String?
  mediaUrl       String?
  templateName   String?
  templateParams Json? // Stored as JSON object
  accountId      String
  account        WhatsAppAccount  @relation(fields: [accountId], references: [id])
  status         String           @default("COMPLETED") // DRAFT, SCHEDULED, ACTIVE, PAUSED, COMPLETED, FAILED
  scheduledAt    DateTime?
  completedAt    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

// Store individual messages
model WhatsAppMessage {
  id                    String               @id @default(cuid())
  wamid                 String? // WhatsApp Message ID for delivery tracking
  status                MessageStatus        @default(PENDING)
  message               String?
  media                 Json[] // { type: "image", handle: "https://example.com/image.jpg" }
  isOutbound            Boolean              @default(false)
  errorMessage          String?
  phoneNumber           String?
  sentAt                DateTime?
  deliveredAt           DateTime?            @default(now())
  readAt                DateTime?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  whatsAppPhoneNumberId String?
  whatsAppPhoneNumber   WhatsAppPhoneNumber? @relation(fields: [whatsAppPhoneNumberId], references: [id])
  recipientId           String
  recipient             WhatsAppRecipient    @relation(fields: [recipientId], references: [id])
}

model WhatsAppAutomation {
  id String @id @default(cuid())
  name String

  phoneNumberId String
  phoneNumber WhatsAppPhoneNumber @relation(fields: [phoneNumberId], references: [id])

  automationJson Json
  recipientArray Json[] // { [recipientNumber: string, automationTime: string] }

  status String @default("ACTIVE") // ACTIVE, INACTIVE
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Label {
  id String @id @default(cuid())
  name String
  description String?
  
  color String @default("blue") // blue, green, red, yellow, purple, orange, pink, gray, brown, black, white

  accountId String
  account   WhatsAppAccount @relation(fields: [accountId], references: [id])

  recipients WhatsAppRecipient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactAttribute {
  id String @id @default(cuid())
  name String
  type ContactAttributeType @default(TEXT)

  accountId String
  account   WhatsAppAccount @relation(fields: [accountId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}